buildscript {
    ext.quickcheck_version = '0.7'
    ext.assertj_version = '3.6.1'
    ext.corda_release_version = 'corda-3.0-RC01'
    ext.corda_gradle_plugins_version = '3.0.8'
    ext.kotlin_version = '1.1.60'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'
    ext.jolokia_version = '1.3.7'
    ext.jersey_version = '2.26'
    ext.jetty_version = '9.4.8.v20171121'
    ext.postgresql_version = '42.1.4'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
        // classpath "net.corda.plugins:cordform-common:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath 'org.akhikhl.gretty:gretty:+' // Comment this to fix the issue. I have no idea why.
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'maven-publish'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    // The bank of corda CorDapp depends upon Cash CorDapp features
    cordapp "net.corda:corda-finance:$corda_release_version"

    // Corda integration dependencies
    cordaCompile "net.corda:corda:$corda_release_version"
    cordaCompile "net.corda:corda-webserver:$corda_release_version"
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-jfx:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-webserver-impl:$corda_release_version"
    cordaCompile "net.corda:corda-node-driver:$corda_release_version"

    // Javax is required for webapis
    compile "org.glassfish.jersey.core:jersey-server:${jersey_version}"

    // Cordapp dependencies
    // Specify your cordapp's dependencies below, including dependent cordapps

    // Test dependencies
    testCompile "junit:junit:$junit_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    // CordformationDefinition is an experimental feature
    definitionClass = 'net.corda.bank.BankOfCordaCordform'
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

publishing {
    publications {
        jarAndSources(MavenPublication) {
            from components.java
            artifactId 'bankofcorda'

            artifact sourceJar
            artifact javadocJar
        }
    }
}

task runRPCCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_RPC'
    args '--quantity'
    args 20000
    args '--currency'
    args 'USD'
}

task runWebCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_WEB'
    args '--quantity'
    args 30000
    args '--currency'
    args 'GBP'
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'net.corda.samples.demos.bankofcorda'
        )
    }
}
